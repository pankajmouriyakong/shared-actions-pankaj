name: ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  files-changed:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            scan-docker-image: 'security-actions/scan-docker-image/**'
            sca: 'security-actions/sca/**'
            scan-rust: 'security-actions/scan-rust/**'
            semgrep: 'security-actions/semgrep/**'
            sign-docker-image: 'security-actions/sign-docker-image/**'
            code-build-actions: 'code-build-actions/build-js-sdk/**'
            lua-lint: 'code-check-actions/lua-lint/**'
            rust-lint: 'code-check-actions/rust-lint/**'
            slack-actions: 'slack-actions/workflow-notification/**'
            cleanup: 'pr-previews/cleanup/**'
            up-to-date: 'pr-previews/up-to-date/**'
            validate: 'pr-previews/validate/**'

  setup-dependencies:
    needs: files-changed
    runs-on: ubuntu-latest
    if: ${{ needs.files-changed.outputs.packages != '[]' }}
    outputs:
      nodeVersion: ${{ steps.node-version.outputs.nodeVersion }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Node Version
        id: node-version
        run: |
          nodeVersion="$(node --version | grep -oE '[0-9]+' | head -n1)"
          echo "nodeVersion=$nodeVersion" >> $GITHUB_OUTPUT

      - name: Install PNPM
        run: |
          npm install -g pnpm
          pnpm --version

      - name: Dependency Cache
        id: dependency-cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: pnpm-${{ steps.node-version.outputs.nodeVersion }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install Dependencies
        if: ${{ steps.dependency-cache.outputs.cache-hit != 'true' }}
        run: |
          pnpm install --frozen-lockfile

#      - name: Commit lint
#        uses: wagoid/commitlint-github-action@v5
#        with:
#          failOnWarnings: true

  build:
    needs: [ files-changed, setup-dependencies ]
    if: ${{ needs.files-changed.outputs.packages != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.files-changed.outputs.packages) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install PNPM
        run: |
          npm install -g pnpm
          pnpm --version

      - name: Dependency Cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: pnpm-${{ needs.setup-dependencies.outputs.nodeVersion }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore Dependencies
        if: ${{ steps.dependency-cache.outputs.cache-hit != 'true' }}
        run: |
          pnpm install --frozen-lockfile

      - name: Run Tests
        run: |
          pnpm lint


  no-file-change:
    needs: [ files-changed ]
    if: ${{ needs.files-changed.outputs.packages == '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: No Changes Detected
        run: echo "No changes detected in the monitored packages. Skipping build and tests."