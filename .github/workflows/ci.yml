name: CI

on:
  pull_request:
    branches: [ independent-releases ]
  push:
    branches: [ independent-releases ]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            scan-docker-image: 'security-actions/scan-docker-image/**'
            sca: 'security-actions/sca/**'
            scan-rust: 'security-actions/scan-rust/**'
            semgrep: 'security-actions/semgrep/**'
            sign-docker-image: 'security-actions/sign-docker-image/**'

  build:
    needs: [ changes ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.packages) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install PNPM
        shell: bash
        run: |
          npm i -g pnpm
          pnpm --version
          git checkout ${{ github.head_ref }}
          pnpm install  --frozen-lockfile

      - name: Commit lint
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        with:
          failOnWarnings: true

      - name: Dependency Cache
        id: dependency-cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: pnpm-20-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Build & Test action
        if: ${{ steps.dependency-cache.outputs.cache-hit != 'true' && steps.filter.outputs.scan-docker-image == 'true'}}
        shell: bash
        run: |
          pnpm lint
          pnpm run package