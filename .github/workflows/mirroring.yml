name: Mirroring

on:
  workflow_dispatch:
  push:
    branches:
      - 'run-build-on-change-2'
    paths:
      - '.github/build/docker/security-image-matrix.yml'
  schedule:
    - cron: '0 0 * * *' # Runs every midnight

permissions:
  contents: read
  discussions: read
  issues: read
  pull-requests: read
  id-token: write

env:
  AWS_ACCOUNT_ID: 992382581569
  REGION: us-east-1

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest

    outputs:
      assets: ${{ steps.convert_yaml_to_json.outputs.assets }}
      ecr_registry: ${{ steps.config.outputs.ecr_registry }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Convert YAML to JSON
        id: convert_yaml_to_json
        run: |
          matrix_file=".github/build/docker/security-image-matrix.yml"
          assets_json=$(yq eval -o=json '.assets' "$matrix_file" | jq -c '.')
          echo "$assets_json" > assets.json
          echo "assets=$assets_json" >> $GITHUB_OUTPUT

      - name: Construct ECR registry
        id: config
        run: |
          echo "ecr_registry=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

  build-publish-assets:
    runs-on: ubuntu-latest
    needs: metadata
    name: Build Asset - ${{ matrix.asset.name }}
    permissions:
      id-token: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        asset: ${{ fromJSON(needs.metadata.outputs.assets) }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: creds
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecr-private-role-to-pull
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.metadata.outputs.ecr_registry }}
          username: ${{ steps.creds.outputs.aws-access-key-id }}
          password: ${{ steps.creds.outputs.aws-secret-access-key }}

      - name: Set Docker build args
        id: format_build_args
        run: |
          # Define and set platforms
          platforms="linux/amd64,linux/arm64"
          echo "platforms=$platforms" >> $GITHUB_ENV

          # Serialize build_args using toJson and ensure it's properly quoted
          build_args='${{ toJson(matrix.asset.build_args) }}'

          echo "build_args before processing: $build_args"  # Debugging: Print the build_args

          # Check if build_args is empty or null
          if [[ "$build_args" == "null" || -z "$build_args" ]]; then
            echo "build_args=" >> $GITHUB_ENV
          else
            # Validate if build_args is valid JSON
            if echo "$build_args" | jq empty >/dev/null 2>&1; then
              # Convert JSON to key=value pairs, ensuring values are properly quoted
              echo "$build_args" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
            else
              echo "Invalid JSON format for build_args: $build_args" >&2
              exit 1
            fi
          fi
        shell: bash

      - name: Parse vendor specific image tag
        id: base_tool_image_meta
        run: |
          image=${{ env.BASE_TOOL_IMAGE }}
          full_image_version=${image#*:}
          echo "full_image_version=$full_image_version" >> $GITHUB_OUTPUT
          echo "image_name=${image%%:*}" >> $GITHUB_OUTPUT
          echo "image_sha=${image#*@}" >> $GITHUB_OUTPUT
          echo "image_tag=${full_image_version%%@*}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.metadata.outputs.ecr_registry }}/${{ matrix.asset.name }}
          sep-tags: ","
          tags: |
            type=raw,enable=true,value=latest
            type=raw,enable=true,value=${{ steps.base_tool_image_meta.outputs.image_tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: image
        with:
          file: security-actions/build/dockerfiles/${{ matrix.asset.name }}.Dockerfile
          context: .
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ env.platforms }}
          build-args: ${{ env.build_args }}
          provenance: false
          outputs: type=image,oci-mediatypes=true
