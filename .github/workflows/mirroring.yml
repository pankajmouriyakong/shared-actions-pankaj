name: Mirroring

on:
  push:
    branches:
      - 'feat-multiplatform-builds'
  workflow_dispatch:

permissions:
  contents: read
  discussions: read
  issues: read
  pull-requests: read
  id-token: write

env:
  AWS_ACCOUND_ID: 992382581569
  REGION: us-east-1

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    
    outputs:
      assets: ${{ steps.config.outputs.assets }}
    steps:
    - uses: actions/checkout@v3
    - name: Construct tooling matrix
      if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
      id: config
      run: |
        matrix_file=".github/dependencies.yml"
        assets=$(yq eval -o=json '.assets' $matrix_file)
        # Construct the dependency matrix
        # Format tooling build_args as key=value pair space separated string
        single_line_assets=$(echo "$assets" | jq -rc 'map({
          name: .name,
          build_args: (
            .build_args | 
            to_entries | 
            map("\(.key)=\(.value)") | 
            join(" ")
          )
        })')  
        echo "ASSETS_JSON=$single_line_assets"
        echo "assets=$single_line_assets" >> $GITHUB_OUTPUT
  
  # TODO: Enhance this job to run per asset frequency schedule
  build-publish-assets:
    runs-on: ubuntu-latest
    needs: metadata
    name: Build Asset - ${{ matrix.asset.name }}
    permissions:
      id-token: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        asset: ${{ fromJSON(needs.metadata.outputs.assets) }}

    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: creds
        with:
          aws-region: ${{env.REGION}}
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUND_ID}}:role/ecr-private-role-to-pull
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{env.AWS_ACCOUND_ID}}.dkr.ecr.${{env.REGION}}.amazonaws.com
          username: ${{ steps.creds.outputs.aws-access-key-id }}
          password: ${{ steps.creds.outputs.aws-secret-access-key }}
    
      - name: Set Docker build args
        id: format_build_args
        run: |
          # Accessing the matrix asset to get build_args
          build_args="${{ matrix.asset.build_args }}"
          
          # New line separated formmated string (base_image:<name>\nbase_tag:<x.y.z>\n)
          formatted_build_args=$(echo "$build_args" | tr ' ' '\n' | sed 's/\([^=]*\)=\([^ ]*\)/"\1=\2"/')

          # Combine formatted_build_args into a single multi-line string for Docker build args
          # Set output to a single multi-line block
          echo "build_args<<EOF" >> $GITHUB_ENV
          echo "$formatted_build_args" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}
          sep-tags: ","
          tags: |
            type=raw,${{ env.BASE_TAG }} # Use same tags as base image
        env:
          ECR_REGISTRY: ${{env.AWS_ACCOUND_ID}}.dkr.ecr.${{ env.REGION }}.amazonaws.com

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: image
        with:
          file: security-actions/build/dockerfiles/${{ matrix.asset.name }}.Dockerfile
          context: .
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # platforms: ${{ steps.docker_build_args.outputs.platforms }}
          build-args: ${{ env.build_args }}
          # these 2 options are needed so that the MediaType of the manifest is
          # OCI-compliant for other downstream integrations
          # see also:
          #   - https://github.com/docker/buildx/issues/1507
          #   - https://github.com/docker/buildx/issues/1509#issuecomment-1378538197
          provenance: false
          outputs: type=image,oci-mediatypes=true
          platforms: linux/amd64,linux/arm64
